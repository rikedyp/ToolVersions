{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About A tool to demonstrate automatic versioning and branching for backported fixes, including versioned documentation.","title":"About"},{"location":"#about","text":"A tool to demonstrate automatic versioning and branching for backported fixes, including versioned documentation.","title":"About"},{"location":"features/","text":"Features Get version The Version function is used to get the current version of MyTool: MyTool.version","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#get-version","text":"The Version function is used to get the current version of MyTool: MyTool.version","title":"Get version"},{"location":"install/","text":"Installation Using ]Get Go to the releases page and copy the URL for MyTool.apln (e.g. right click \u2192 Copy Link Location) Get MyTool into your workspace. For example: ]Get https://github.com/rikedyp/MyTool/releases/download/0.0.4-90ffa7e6b203e52468c113c72af75bff9d411f65/MyTool.apln Using ]Load Go to the releases page and download MyTool.apln Load MyTool into your workspace: ]Load /path/to/MyTool.apln","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#using-get","text":"Go to the releases page and copy the URL for MyTool.apln (e.g. right click \u2192 Copy Link Location) Get MyTool into your workspace. For example: ]Get https://github.com/rikedyp/MyTool/releases/download/0.0.4-90ffa7e6b203e52468c113c72af75bff9d411f65/MyTool.apln","title":"Using ]Get"},{"location":"install/#using-load","text":"Go to the releases page and download MyTool.apln Load MyTool into your workspace: ]Load /path/to/MyTool.apln","title":"Using ]Load"},{"location":"Meta/","text":"About Meta This part of the documentation is about the repository itself. The main documentation describes the tool.","title":"Meta"},{"location":"Meta/#about-meta","text":"This part of the documentation is about the repository itself. The main documentation describes the tool.","title":"About Meta"},{"location":"Meta/Documentation/","text":"Writing Documentation Documentation is written as markdown files and rendered using Material for MkDocs . To create versioned documentation, use Mike . Documentation lives in the docs/ folder in the root of the repository. Note All commands are from the source root, one level above the docs/ folder. Setting up MkDocs First, initialise the docs folder and configuration mkdocs.yml file. mkdocs new . Optionally, copy the configuration file, styles and images from this repository (details of differences to come). You can now start writing documentation, and see how it looks in rendered form . When you are ready to publish the first and latest version of your documentation, set the default docs to latest (enables redirect from root), then publish the current version . mike deploy --update-aliases 0.0 latest mike set-default --push latest Publishing docs Latest If you didn't do this during setup, set the default docs to latest (enables redirect from root) mike set-default --push latest Then, deploy the current docs to GitHub with the correct version and alias latest mike deploy --push --update-alises 0.0 latest Any version Mike simply builds your documentation from the current doc source and commits it to the gh-pages branch in a folder with the same name as the version you give Mike. For example, mike deploy 0.3 will put the current source in gh-pages/0.3 . When pushed to GitHub with GitHub Pages enabled for the gh-pages branch, this built version becomes available at the url https://user.github.io/repo/0.3 . Warning Using mike deploy --push VersionName will overwrite the existing documentation in the VersionName folder. Viewing rendered docs Hot reloading means that changes to markdown files are quickly rendered on a locally served web page. mkdocs serve Maintaining latest docs The markdown files in the docs folder at a given commit should reflect the behaviour of the tool at that commit. Publishing MkDocs generates static websites so the documentation can be made available for public consumption using any web server. For convenience, MkDocs and Mike come with commands which integrate with GitHub.","title":"Writing Documentation"},{"location":"Meta/Documentation/#writing-documentation","text":"Documentation is written as markdown files and rendered using Material for MkDocs . To create versioned documentation, use Mike . Documentation lives in the docs/ folder in the root of the repository. Note All commands are from the source root, one level above the docs/ folder.","title":"Writing Documentation"},{"location":"Meta/Documentation/#setting-up-mkdocs","text":"First, initialise the docs folder and configuration mkdocs.yml file. mkdocs new . Optionally, copy the configuration file, styles and images from this repository (details of differences to come). You can now start writing documentation, and see how it looks in rendered form . When you are ready to publish the first and latest version of your documentation, set the default docs to latest (enables redirect from root), then publish the current version . mike deploy --update-aliases 0.0 latest mike set-default --push latest","title":"Setting up MkDocs"},{"location":"Meta/Documentation/#publishing-docs","text":"","title":"Publishing docs"},{"location":"Meta/Documentation/#latest","text":"If you didn't do this during setup, set the default docs to latest (enables redirect from root) mike set-default --push latest Then, deploy the current docs to GitHub with the correct version and alias latest mike deploy --push --update-alises 0.0 latest","title":"Latest"},{"location":"Meta/Documentation/#any-version","text":"Mike simply builds your documentation from the current doc source and commits it to the gh-pages branch in a folder with the same name as the version you give Mike. For example, mike deploy 0.3 will put the current source in gh-pages/0.3 . When pushed to GitHub with GitHub Pages enabled for the gh-pages branch, this built version becomes available at the url https://user.github.io/repo/0.3 . Warning Using mike deploy --push VersionName will overwrite the existing documentation in the VersionName folder.","title":"Any version"},{"location":"Meta/Documentation/#viewing-rendered-docs","text":"Hot reloading means that changes to markdown files are quickly rendered on a locally served web page. mkdocs serve","title":"Viewing rendered docs"},{"location":"Meta/Documentation/#maintaining-latest-docs","text":"The markdown files in the docs folder at a given commit should reflect the behaviour of the tool at that commit.","title":"Maintaining latest docs"},{"location":"Meta/Documentation/#publishing","text":"MkDocs generates static websites so the documentation can be made available for public consumption using any web server. For convenience, MkDocs and Mike come with commands which integrate with GitHub.","title":"Publishing"},{"location":"Meta/Example/","text":"Example This repository serves as a demonstration. The rough philosophy of the process is as follows: The main branch (trunk) is core and stable. Only critical fixes deemed suitable for all builds of compatible Dyalog versions are to be made most of the time. If it is determined that new development (a new feature, or set of not-so-critical bug fixes) is desired, then at that point a support branch is created to freeze the state of the tool for the sake of future builds of old but compatible Dyalog versions. All described changes are made to the main branch (trunk) unless otherwise specified. Set up automated draft releases Using GitHub actions, create an action \"draft-release.yml\" name: \"Draft Release\" on: push: branches: - \"trunk\" workflow_dispatch: # allows triggering from GitHub interface jobs: # Obtain major.minor.[variant-] version number draft_release: runs-on: ubuntu-latest steps: - name: Triggered by which branch run: echo \"$GITHUB_REF\" - name: Checkout code uses: actions/checkout@v2 - name: Read major.minor id: majmin run: | VER=$( cat MyTool.apln | grep \"VERSION_STRING \u2190 '[0-9]\\+.[0-9]\\+..*-\\?0'\" | cut -c 27- | sed \"s/...$//\" ) echo ${VER} echo \"::set-output name=version::${VER}\" # Create or update Draft release - name: Build and test run: | echo \"done!\" - name: Insert patch number # Replaces e.g. VERSION_STRING \u2190 0.3.0 with VERSION_STRING \u2190 0.3.[nruns]-[git-hash] # or VERSION_STRING \u2190 0.3.dev-0 with VERSION_STRING \u2190 0.3.dev-[nruns]-[git-hash] run: | sed -i \"/VERSION_STRING \u2190 '[0-9]\\+.[0-9]\\+..*-\\?0'/s/0'/${{ github.run_number }}-${{ github.sha }}'/\" MyTool.apln - name: Draft release uses: \"marvinpinto/action-automatic-releases@latest\" with: repo_token: \"${{ secrets.GITHUB_TOKEN }}\" automatic_release_tag: \"${{ steps.majmin.outputs.version }}.${{ github.run_number }}-${{ github.sha }}\" prerelease: false draft: true title: \"v${{ steps.majmin.outputs.version }}.${{ github.run_number }}\" files: | MyTool.apln In the real system, this should delete the previous unpublished draft release. With the above action, draft releases must be manually removed. Furthermore, an organisation's repository should be developed using forks and pull requests, but here commits are made directly to the main repository. In this system, supported Dyalog versions are manually input in release notes upon publication of releases. In the real system, this part may be automated. Initial commits (v0.0) Compatible with Dyalog v17.0 to latest Dyalog v17.0 is released including this (patch) version of the tool. From this point onwards Dyalog v17.1 is the actively developed version. Create README.md Create MyTool.apln with embedded version function (0th feature) Document MyTool v0.0 Commit to the trunk git add . git commit -m \"Version function\" git push Set default docs to latest mike set-default --push latest Publish latest docs mike deploy --push --update-aliases 0.0 latest Publish release First line of notes: Works with Dyalog versions: 17.0- Set up GitHub Pages On the GitHub website, go to the repository settings (e.g. https://github.com/rikedyp/MyTool/settings ) and enable GitHub pages using the gh-pages branch. Post-release bug fixes Shortly after the release of Dyalog v17.0, bugs were found for which a fixed version of MyTool is to be included in future builds of v17.1 (active development) and v17.0. Fix bug Commit change Push Publish release Presumably once a few of these bugs have been fixed, publish the fixes together, rather than one release per bug fix. Add a feature (v0.1) Compatible with Dyalog v17.0 to latest. However, this new development will only be included with the Dyalog version currently in active development (v17.1). Create branch from the head named 0.0.170 Update VERSION_STRING In MyTool, VERSION_STRING \u2190 '0.0.170-0' In a real tool, possibly VERSION_STRING \u2190 '0.0.0' Tag commit 0.0.170-1-[git-hash] In a real tool, this could be automated Create a draft release from branch 0.0.170 This draft release is now picked up by future builds of Dyalog v17.0 Checkout the trunk Add feature ListReleases to MyTool.apln Document ListReleases Create \"Old Versions\" page in docs Commit changes 4 and 5 to trunk Commit \"old versions page\" change to trunk For each previous minor version (with docs for that particular version) Check out commit with tag of previous minor release (corresponding to current docs for that version) Cherry pick \"old versions page\" commit to previous release Publish old docs version mike deploy --push 0.0 Publish new latest docs version mike deploy --push --update-aliases 0.1 latest Fix a bug Dyalog v17.1 is released including this (patch) version of the tool. From this point onwards Dyalog v18.0 is the actively developed version. Add comment (\"bug fix\") to MyTool.apln Commit to trunk Publish release First line of notes: Works with Dyalog versions: 17.0- Period of special bug fixes A set of post-release bug fixes , but for Dyalog versions v17.1 and v18.0. Add a feature (v0.2) Compatible with Dyalog v18.0 to latest Create a branch from the head named 171 Create a draft release from branch 171 This draft release is now picked up by future builds of Dyalog v17.1 Checkout the head of the trunk Add F2 to MyTool.apln Document F2 Commit to trunk Publish new docs version Update \"old versions\" page of previous docs versions (see Add a feature (v0.1) ) Add a feature (v0.3) Compatible with Dyalog v18.0 to latest Dyalog v18.0 is released with this (patch) version of the tool, including the new feature F3 . From this point onwards Dyalog v18.1 is the actively developed version. Add F3 to MyTool.apln Document F3 Commit to trunk Publish new docs version Update \"old versions\" page of previous docs version (see Add a feature (v0.1) ) Make change to v0.1 docs Checkout commit of 0.1 release Make change to doc Publish old docs version Copy docs folder somewhere on your file system Checkout head Copy locally stored, modified old docs folder to docs/0.1 Modify mkdocs.yml to exclude docs/0.1 Commit to trunk and push Backport a critical bug fix This bug has been deemed severe enough to warrant cherry-picked backporting to old versions of the tool which are compatible with supported versions of Dyalog The fix will be backported to MyTool versions included in builds of v17.0, v17.1 and v18.0. However, the bug requires different fixes for v17s and v18s. A new branch 171 will be created. Fix bug in the trunk Commit to trunk Determine commits corresponding to old releases of tool (using the tools versions tool , which need the patch applied and for each commit: Branch the commit, giving it the appropriate name Cherry pick the fix Push the new branch to GitHub","title":"Example"},{"location":"Meta/Example/#example","text":"This repository serves as a demonstration. The rough philosophy of the process is as follows: The main branch (trunk) is core and stable. Only critical fixes deemed suitable for all builds of compatible Dyalog versions are to be made most of the time. If it is determined that new development (a new feature, or set of not-so-critical bug fixes) is desired, then at that point a support branch is created to freeze the state of the tool for the sake of future builds of old but compatible Dyalog versions. All described changes are made to the main branch (trunk) unless otherwise specified.","title":"Example"},{"location":"Meta/Example/#set-up-automated-draft-releases","text":"Using GitHub actions, create an action \"draft-release.yml\" name: \"Draft Release\" on: push: branches: - \"trunk\" workflow_dispatch: # allows triggering from GitHub interface jobs: # Obtain major.minor.[variant-] version number draft_release: runs-on: ubuntu-latest steps: - name: Triggered by which branch run: echo \"$GITHUB_REF\" - name: Checkout code uses: actions/checkout@v2 - name: Read major.minor id: majmin run: | VER=$( cat MyTool.apln | grep \"VERSION_STRING \u2190 '[0-9]\\+.[0-9]\\+..*-\\?0'\" | cut -c 27- | sed \"s/...$//\" ) echo ${VER} echo \"::set-output name=version::${VER}\" # Create or update Draft release - name: Build and test run: | echo \"done!\" - name: Insert patch number # Replaces e.g. VERSION_STRING \u2190 0.3.0 with VERSION_STRING \u2190 0.3.[nruns]-[git-hash] # or VERSION_STRING \u2190 0.3.dev-0 with VERSION_STRING \u2190 0.3.dev-[nruns]-[git-hash] run: | sed -i \"/VERSION_STRING \u2190 '[0-9]\\+.[0-9]\\+..*-\\?0'/s/0'/${{ github.run_number }}-${{ github.sha }}'/\" MyTool.apln - name: Draft release uses: \"marvinpinto/action-automatic-releases@latest\" with: repo_token: \"${{ secrets.GITHUB_TOKEN }}\" automatic_release_tag: \"${{ steps.majmin.outputs.version }}.${{ github.run_number }}-${{ github.sha }}\" prerelease: false draft: true title: \"v${{ steps.majmin.outputs.version }}.${{ github.run_number }}\" files: | MyTool.apln In the real system, this should delete the previous unpublished draft release. With the above action, draft releases must be manually removed. Furthermore, an organisation's repository should be developed using forks and pull requests, but here commits are made directly to the main repository. In this system, supported Dyalog versions are manually input in release notes upon publication of releases. In the real system, this part may be automated.","title":"Set up automated draft releases"},{"location":"Meta/Example/#initial-commits-v00","text":"Compatible with Dyalog v17.0 to latest Dyalog v17.0 is released including this (patch) version of the tool. From this point onwards Dyalog v17.1 is the actively developed version. Create README.md Create MyTool.apln with embedded version function (0th feature) Document MyTool v0.0 Commit to the trunk git add . git commit -m \"Version function\" git push Set default docs to latest mike set-default --push latest Publish latest docs mike deploy --push --update-aliases 0.0 latest Publish release First line of notes: Works with Dyalog versions: 17.0-","title":"Initial commits (v0.0)"},{"location":"Meta/Example/#set-up-github-pages","text":"On the GitHub website, go to the repository settings (e.g. https://github.com/rikedyp/MyTool/settings ) and enable GitHub pages using the gh-pages branch.","title":"Set up GitHub Pages"},{"location":"Meta/Example/#post-release-bug-fixes","text":"Shortly after the release of Dyalog v17.0, bugs were found for which a fixed version of MyTool is to be included in future builds of v17.1 (active development) and v17.0. Fix bug Commit change Push Publish release Presumably once a few of these bugs have been fixed, publish the fixes together, rather than one release per bug fix.","title":"Post-release bug fixes"},{"location":"Meta/Example/#add-a-feature-v01","text":"Compatible with Dyalog v17.0 to latest. However, this new development will only be included with the Dyalog version currently in active development (v17.1). Create branch from the head named 0.0.170 Update VERSION_STRING In MyTool, VERSION_STRING \u2190 '0.0.170-0' In a real tool, possibly VERSION_STRING \u2190 '0.0.0' Tag commit 0.0.170-1-[git-hash] In a real tool, this could be automated Create a draft release from branch 0.0.170 This draft release is now picked up by future builds of Dyalog v17.0 Checkout the trunk Add feature ListReleases to MyTool.apln Document ListReleases Create \"Old Versions\" page in docs Commit changes 4 and 5 to trunk Commit \"old versions page\" change to trunk For each previous minor version (with docs for that particular version) Check out commit with tag of previous minor release (corresponding to current docs for that version) Cherry pick \"old versions page\" commit to previous release Publish old docs version mike deploy --push 0.0 Publish new latest docs version mike deploy --push --update-aliases 0.1 latest","title":"Add a feature (v0.1)"},{"location":"Meta/Example/#fix-a-bug","text":"Dyalog v17.1 is released including this (patch) version of the tool. From this point onwards Dyalog v18.0 is the actively developed version. Add comment (\"bug fix\") to MyTool.apln Commit to trunk Publish release First line of notes: Works with Dyalog versions: 17.0-","title":"Fix a bug"},{"location":"Meta/Example/#period-of-special-bug-fixes","text":"A set of post-release bug fixes , but for Dyalog versions v17.1 and v18.0.","title":"Period of special bug fixes"},{"location":"Meta/Example/#add-a-feature-v02","text":"Compatible with Dyalog v18.0 to latest Create a branch from the head named 171 Create a draft release from branch 171 This draft release is now picked up by future builds of Dyalog v17.1 Checkout the head of the trunk Add F2 to MyTool.apln Document F2 Commit to trunk Publish new docs version Update \"old versions\" page of previous docs versions (see Add a feature (v0.1) )","title":"Add a feature (v0.2)"},{"location":"Meta/Example/#add-a-feature-v03","text":"Compatible with Dyalog v18.0 to latest Dyalog v18.0 is released with this (patch) version of the tool, including the new feature F3 . From this point onwards Dyalog v18.1 is the actively developed version. Add F3 to MyTool.apln Document F3 Commit to trunk Publish new docs version Update \"old versions\" page of previous docs version (see Add a feature (v0.1) )","title":"Add a feature (v0.3)"},{"location":"Meta/Example/#make-change-to-v01-docs","text":"Checkout commit of 0.1 release Make change to doc Publish old docs version Copy docs folder somewhere on your file system Checkout head Copy locally stored, modified old docs folder to docs/0.1 Modify mkdocs.yml to exclude docs/0.1 Commit to trunk and push","title":"Make change to v0.1 docs"},{"location":"Meta/Example/#backport-a-critical-bug-fix","text":"This bug has been deemed severe enough to warrant cherry-picked backporting to old versions of the tool which are compatible with supported versions of Dyalog The fix will be backported to MyTool versions included in builds of v17.0, v17.1 and v18.0. However, the bug requires different fixes for v17s and v18s. A new branch 171 will be created. Fix bug in the trunk Commit to trunk Determine commits corresponding to old releases of tool (using the tools versions tool , which need the patch applied and for each commit: Branch the commit, giving it the appropriate name Cherry pick the fix Push the new branch to GitHub","title":"Backport a critical bug fix"},{"location":"Meta/ToolVersions/","text":"The Tool Versions Tool A web API is proposed to facilitate: including a GitHub-hosted tool in Dyalog installations. being able to reproduce a particular build of Dyalog from the past. find the latest \"stable\" (support) version of a tool, that may contain critical bug fixes, which is compatible with an old version of Dyalog find the latest version of a tool which is compatible with any particular version of Dyalog It would allow URL queries to obtain releases, for example: https://toolversions.dyalog.com/toolname/180 to obtain the latest release of toolname compatible with Dyalog v18.0. https://toolversions.dyalog.com/toolname/180?date=2021-01-13 to obtain the release of toolname which was included with the Dyalog build on the 13 th January 2021. It would also provide a GUI at https://toolversions.dyalog.com to allow users to find that information. See details of the tool versions formats","title":"The Tool Versions Tool"},{"location":"Meta/ToolVersions/#the-tool-versions-tool","text":"A web API is proposed to facilitate: including a GitHub-hosted tool in Dyalog installations. being able to reproduce a particular build of Dyalog from the past. find the latest \"stable\" (support) version of a tool, that may contain critical bug fixes, which is compatible with an old version of Dyalog find the latest version of a tool which is compatible with any particular version of Dyalog It would allow URL queries to obtain releases, for example: https://toolversions.dyalog.com/toolname/180 to obtain the latest release of toolname compatible with Dyalog v18.0. https://toolversions.dyalog.com/toolname/180?date=2021-01-13 to obtain the release of toolname which was included with the Dyalog build on the 13 th January 2021. It would also provide a GUI at https://toolversions.dyalog.com to allow users to find that information. See details of the tool versions formats","title":"The Tool Versions Tool"},{"location":"Meta/Workflow/","text":"Workflow Version information For any given commit to a repository that is involved in this process, the following information needs to be available. A minimum, and optionally a maximum, APL version that the commit is compatible with. The tool's own version number: Major, Minor and optionally a \u201cVariant\u201d which will identify versions of the code that target abnormal build targets. In this example, the version information is found in the Version function of the tool which is a single scripted namespace. \u2207 VERSION_STRING\u2190Version;APL_VERSION_RANGE APL_VERSION_RANGE \u2190 '170-181' VERSION_STRING \u2190 '0.0.0' \u2207 See the tool versions tool for more information about Dyalog-tool version compatibility and naming schemes. Release notes The first line of the release notes must follow a strict pattern to allow the automated Tool Versions API to match Dyalog versions with tool versions. The first line begins with the text Works with Dyalog versions: (the colon : is followed by a single space \u2395UCS 32 character). That text is followed by one or more numbers with the following specification: Number format Compatibility Example A single Dyalog version number This tool version is compatible with that Dyalog version only Works with Dyalog versions: 17.0 A single Dyalog version number followed by a comma This tool version is compatible with that Dyalog version or higher Works with Dyalog versions: 17.1, Two Dyalog version numbers separated by a dash \u2395UCS 45 This tool version is compatible with all Dyalog versions from the lowest to the highest specified inclusive Works with Dyalog versions: 17.1-19.0 Two or more Dyalog version numbers separated by commas \u2395UCS 44 This tool version is compatible with the specified Dyalog versions only Works with Dyalog versions: 17.1-19.0 Examples: Works with Dyalog versions: 17.0 \u235d v17.0 only Works with Dyalog versions: 17.1, \u235d v17.1 or higher Works with Dyalog versions: 17.0-18.1 \u235d v17.0,v17.1,v18.0,v18.1 Works with Dyalog versions: 16.0,17.1 \u235d v16.0 and v17.1 only Definition of Done It is a good idea to decide on these criteria as early as possible in a development cycle. The definition of done must be met before a release is made public (\"released\"). Pre-flight checklists Details to be included later. For now, see the Example . Increment version number When incrementing the major or minor version number: Dyalog has a release What to include in Dyalog source control (svn) external sources: Backporting a bug fix When a bug deemed critical needs a fix to support an old Dyalog version Making a change to old documentation This process is a little bit involved, but should be a rare occurance.","title":"Workflow"},{"location":"Meta/Workflow/#workflow","text":"","title":"Workflow"},{"location":"Meta/Workflow/#version-information","text":"For any given commit to a repository that is involved in this process, the following information needs to be available. A minimum, and optionally a maximum, APL version that the commit is compatible with. The tool's own version number: Major, Minor and optionally a \u201cVariant\u201d which will identify versions of the code that target abnormal build targets. In this example, the version information is found in the Version function of the tool which is a single scripted namespace. \u2207 VERSION_STRING\u2190Version;APL_VERSION_RANGE APL_VERSION_RANGE \u2190 '170-181' VERSION_STRING \u2190 '0.0.0' \u2207 See the tool versions tool for more information about Dyalog-tool version compatibility and naming schemes.","title":"Version information"},{"location":"Meta/Workflow/#release-notes","text":"The first line of the release notes must follow a strict pattern to allow the automated Tool Versions API to match Dyalog versions with tool versions. The first line begins with the text Works with Dyalog versions: (the colon : is followed by a single space \u2395UCS 32 character). That text is followed by one or more numbers with the following specification: Number format Compatibility Example A single Dyalog version number This tool version is compatible with that Dyalog version only Works with Dyalog versions: 17.0 A single Dyalog version number followed by a comma This tool version is compatible with that Dyalog version or higher Works with Dyalog versions: 17.1, Two Dyalog version numbers separated by a dash \u2395UCS 45 This tool version is compatible with all Dyalog versions from the lowest to the highest specified inclusive Works with Dyalog versions: 17.1-19.0 Two or more Dyalog version numbers separated by commas \u2395UCS 44 This tool version is compatible with the specified Dyalog versions only Works with Dyalog versions: 17.1-19.0","title":"Release notes"},{"location":"Meta/Workflow/#examples","text":"Works with Dyalog versions: 17.0 \u235d v17.0 only Works with Dyalog versions: 17.1, \u235d v17.1 or higher Works with Dyalog versions: 17.0-18.1 \u235d v17.0,v17.1,v18.0,v18.1 Works with Dyalog versions: 16.0,17.1 \u235d v16.0 and v17.1 only","title":"Examples:"},{"location":"Meta/Workflow/#definition-of-done","text":"It is a good idea to decide on these criteria as early as possible in a development cycle. The definition of done must be met before a release is made public (\"released\").","title":"Definition of Done"},{"location":"Meta/Workflow/#pre-flight-checklists","text":"Details to be included later. For now, see the Example .","title":"Pre-flight checklists"},{"location":"Meta/Workflow/#increment-version-number","text":"When incrementing the major or minor version number:","title":"Increment version number"},{"location":"Meta/Workflow/#dyalog-has-a-release","text":"What to include in Dyalog source control (svn) external sources:","title":"Dyalog has a release"},{"location":"Meta/Workflow/#backporting-a-bug-fix","text":"When a bug deemed critical needs a fix to support an old Dyalog version","title":"Backporting a bug fix"},{"location":"Meta/Workflow/#making-a-change-to-old-documentation","text":"This process is a little bit involved, but should be a rare occurance.","title":"Making a change to old documentation"}]}